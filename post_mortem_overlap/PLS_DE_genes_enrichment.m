function PLS_DE_genes_enrichment(PLSroot, DEgenes,nperm)

% This script looks at the ranking of a target set of genes (e.g. DE genes
% from external datasets) and tests if they are weighted significantly
% higher or lower in a PLS component than would be expected by chance.

% PLS is rootname of .csv containing PLS gene weightings
% e.g. 'significant_PLS2_geneWeights_ztrans_sa2ADJ_PD_LH_Glasser_SW'

% DEgenes is the name of a cell string array of DE genes from other 
% post-mortem study. Some of these are stored in DE_gene_lists_FC1.5.mat,
% and gene lists generated by reanalysis of Dumitriu (2016) data are in
% reanalysed_DE_gene_lists_FC1.5.mat. N.b. FC1.5 lists are filtered by fold
% change.

% nperm is number of permutations to run, ~10000 is fine

%%

% load PLS weighting data
PLScomp = readtable([PLSroot '.csv']);
PLSweights = PLScomp.zscores;
PLSgenes = PLScomp.geneIDs;

%%

% remove null entries
DEgenes = DEgenes(~cellfun(@isempty, DEgenes));

% if there are alternative entries for genes, separate them out via the
% '///' delimeter
a = 1;
store_altnames = {};
for i = 1:length(DEgenes)
    if contains(DEgenes{i},'///')
        altnames = strtrim(split(DEgenes{i},"///"));
        for j = 2:length(altnames)
            store_altnames{a} = altnames{j};
            a = a + 1;
        end
    end
end

if ~isempty(store_altnames)
    DEgenes = [DEgenes; store_altnames'];
end

DEgenes = strtrim(DEgenes);
%%
% match up to PLS list
[idx, ~] = ismember(PLSgenes,DEgenes);

disp([num2str(length(DEgenes)) ' DE genes'])
disp([num2str(sum(idx)) ' of which matched to PLS genes'])

myPLSzw = PLSweights(idx);

% get mean weighting 
R1 = mean(myPLSzw);
disp('mean weighting of DE genes in PLS')
disp(num2str(R1))
disp('difference to PLS mean')
disp(num2str(R1 - mean(PLSweights)))

Rperm = [];
count_up=0;
count_dn=0;

disp('')
disp('testing enrichment in weighted PLS list')

for r = 1:nperm
    permo=randperm(length(PLSgenes));
    myPLSzw_r = PLSweights(permo(1:length(myPLSzw)));
    
    R2 = mean(myPLSzw_r);
    
    
    if R2>=R1
        count_up=count_up+1;
    elseif R2 <= R1
        count_dn=count_dn+1;
    end
    
    Rperm=[Rperm;R2];
end

R = R1;
p_up = count_up/nperm;
p_dn = count_dn/nperm;
disp('upweighted p-val')
disp(num2str(p_up))
disp('downweighted p-val')
disp(num2str(p_dn))
